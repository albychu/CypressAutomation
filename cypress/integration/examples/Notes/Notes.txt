###Solid Tests 
1. Set up the application state
2. Take an actioin
3. make assertion about resulting application state
Sometimes known as Given, When, Then or Arrange, Act, Assert
^BUT you want to first put the application into specific state, 
^THEN take action in application that causes it to change
^ FINALLY check the resulting application state



### Best Practices
1. Stub Requests (piece of code used as substitute for another code or yet-to-be developed code)
Good
    -Fast, Easy, Flexible
        Control the Network: cy.server(), cy.route(), set status codes, set response bodies, test edge cases
    -No Server/Database
Bad
    -Not a true End-to-End (E2E) testing
    -Requires Fixtures
2. Static User
Good
    -Real Session End-to-End (logging in as a real user)
Bad
    -Requires a Server
    -Seed the Database (populate with data)
    -Shares Test State
3. Dynamic User 
    -New User for each Test - before each one
        -Modify DB within Tests
        -Query DB within Tests
Good
    -No State Mutations
    -Flexibe / Powerful
Bad
    -DB Setup / Teardown
    -Slow/Complex

###
 Don't use the UI to build up State
 Set state directly / programmitcally 
 
 Don't use page objects to share UI knowledge
 Write specs in isolation, avoid coupling
 
 Don't limit yourself trying to act like user
 You have native access to everything in application

 No Constraints 
 Control Time: cy.clock()
 Stub Objects: cy.stub()
 Modify Stores: cy.window()
 
cypress has control and can manipulate browser dom (html code) 
    auto accepts alerts and popups - clicks on them
tagname#idname - navigating to url -visit
.classname   .search-keyword 
tagname[attribute=value]    input[type='search']  cypress supports CSS Selector only
form input     can see what happens in each step with screenshot and error messages
click() , type() , text()  = cy.get('.search-keyword').type('ca')
iterating over array of web element using each() = .each(($el, index, $list)
non-cypress commands cannot resovle promises by themselves so resolve it by using .then()
alias to reuse locators
cypress has capability of browser events. window:alert is the event which gets fired on the alert open
    firing the event through cypress to get access to the alert
